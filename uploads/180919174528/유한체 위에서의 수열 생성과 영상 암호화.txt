- 107 -
<국문초록>유한체 위에서의 수열 생성과 영상 암호화
연구자 : 장유준(2학년, happycattony0329@gmail.com)
Binbing Xie(2학년, Huzhang9876@163.com)
Zhang Hui(2학년, xiebinbing897@163.com)
책임지도자 : 조성진(부경대학교, sjcho@pknu.ac.kr)
공동지도자 : 권민정(부경대학교, mjblack02@pknu.ac.kr)
요약문
우리는 인류 역사상 그 어느 때보다도 정보의 보안성이 철저해야하는 시대에 살고 있다. 
이메일과 SNS는 우리들의 정체성을 대변하여 현금은 전자신호로 바뀌어 사람들 사이에서 거
래가 가능한 이유는 중요한 정보들을 어느 개인의 정보를 도용하지 못하게 만들었기 때문이
다. 그러나 정보과학의 기술이 발전하기에 필연적으로 암호 역시 발전해 나가야 한다.
현재 CA를 이용한 암호는 선형점화식을 바탕으로 충분히 긴 키수열로 문장 혹은 이미지를 
암호화 한다. 그러나 이 방식은 단순히 반복되는 수열로 암호문을 만들면 그 수열의 주기의 2
배가 되는 비트의 정보만 가지고도 암호가 풀려버린다는 문제점이 있다. 이러한 단점을 개선
한 키수열이 바로 수축수열이다. 우리는 수축수열 생성함수로 생성한 비선형적 수열을 이용
한 영상암호체계를 설계하고자 한다.
주제어 : 유한체, 1차원 CA, 수열 생성기, 암호키, 영상 암호화
----------------Page (0) Break----------------
유한체 위에서의 수열 생성과 영상 암호화
- 108 -
I. 서론
LFSR이 무엇인지, 기약다항식과 원시다항식이 어떠한 의미를 담고 있는지, 특성다항식 통
해 생성한 수열의 일반항을 구하는 방법, 1차원 CA와 다항식이 어떠한 관계를 가지는지, 그리
고 CA의 주기를 구하는 방법은 수열키를 이용한 암호학의 기초적인 배경지식이다. 흔히 수열
키를 이용한 암호는 평문에 수열키를 XOR하여 암호문을 만드는 가장 기본적인 방식이다. 이
러한 방식에 여러 가지 변화와 다양성을 부여한다해도, 근본적으로 키를 더하는 방식이 크게 
바뀌지 않는다. 이미지의 암호화 역시 이미지를 행렬로 전환시킨 후 수열키를 차례대로 더하
는 것이 보편적인 방식이다. 이때 사용하는 암호키는 일반적으로 선형적인데, 이 경우 주기가 
길어지는 대신 선형복잡도가 떨어지기 때문에 암호로서의 보안성이 떨어진다. 우리는 이러한 
취약한 부분을 개선하기 위하여 수축 수열을 사용하여 영상을 암호화할 것이다.
II. 이론적 배경
1. LFSR (Linear Feedback Shift Register)
1.1 유한체의 정의와 성질
공집합이 아닌 집합 

위에서 정의된 두 연산 

와 
∙
에 대하여 다음이 성립할 때, 
∙
을 체라 한다.
(a) 

는 항등원 

을 갖는 가환군이 된다.
(b) 
∙
는 항등원 

을 갖는 가환군이 된다.
(c) 임의의 원소 
∈
에 대하여 
∙∙∙
이다,

의 원소의 개수가 유한하면 

를 유한체라고 한다.
본 연구에서는 

의 연산 방식 
⊕∙
을 적용한 유한체, 그 중에서도 원소의 개수가 


개인 유한체만을 다룰 것이다.













----------------Page (1) Break----------------
장유준⋅Binbing Xie⋅Zhang Hui
- 109 -

































는 원소가 

과 

로 이루어진 체이다. 수열키를 구성하는 숫자들이 

의 원소이며 
더하기가 XOR 연산을 따르게 되어있다.



는 





의 해가 되는 근 


 그리고 

을 원소로 갖는다.



도 마찬가지의 방법으로 









의 해가 되는 근 


⋯

 그리고 

을 원소로 갖는다.
이때 



을 만족하는 해와 





을 만족하는 해 

에 대응되는 벡터는 각각 다
르다.
































⇒벡터화






















⇒벡터화
정의 1.

인 기약다항식 

가 있다고 하자. 기약다항식의 최고차항이 

일 때 
deg
이라 표현한다.
∈∣


 일 때 

을 

의 주기라고 하고, 
or
라 한다.
예제 2.




or
(1)




or
(2)








or
     (3)

이 자연수일 때 





은 

의 약수를 차수로 하는 모든 기약다항식들을 곱한 결과물이다. 
(이때 


를 포함하지 않는다)
----------------Page (2) Break----------------
유한체 위에서의 수열 생성과 영상 암호화
- 110 -
예제 3.






































×



















정의 4.
원시다항식은 기약다항식들 중에서도 더 특수한 다항식들을 말하는데, 

이 자연수이고 
degor


이면, 

를 원시다항식이라고 한다. 
식 (1), (2)의 

는 원시다항식이고, 식 (3)의 

는 원시다항식이 아니다. 원시다
항식은 같은 최고차항을 가지는 다항식들보다도 주기가 가장 길다. 그러하기 때문에 원시다
항식을 이용하여 긴 수열을 생성하기가 쉽다.
정의 5.
어떤 다항식 

가 

차 다항식일때, 상반다항식은 식 (4)와 같이 정의된다.



         (4)








⋯





일 때, 








⋯





이다.
예제 6.




















또한, 

차 다항식 

에 대하여 


 (

은 자연수)의 상반다항식을 구하면 식 (5)가 
된다.












   (5)
이 성질은 나중에 수열의 일반항을 구할 때 쓰이게 된다.
----------------Page (3) Break----------------
장유준⋅Binbing Xie⋅Zhang Hui
- 111 -
1.2 LFSR (Linear Feedback Shift Register)
LFSR은 

과 

로 이루어진 수열을 만들어내는 기계장치이다.
→→→
↑↓↓
←⊕←
그림 [1]
→
→
→
→
→
→
→
→
그림 [2]
그림 [1]의 상자 안의 숫자들은 기계 내부의 화살표를 따라서 동시에 움직이면서 연산이 된
다. 그림 [1]에서는 가장 왼쪽의 상자의 숫자가 중간 상자로 들어갔고, 중간 상자는 오른쪽 상
자로, 그리고 오른쪽 상자에 있던 숫자가 출력이 된다. 가장 왼쪽의 상자에는 중간 상자와 가
장 오른쪽 상자의 숫자가 XOR 연산으로 처리되어 들어가진다. 이런 과정을 반복하면 이 기계
에서 일정한 주기를 갖는 수열이 출력이 된다.
그림 [2]에서 초기값 처음에 

으로 시작하여 

번의 연산 후에 다시 

으로 되돌아왔
다. 이때 출력되는 수열은 그림 [2]에서 볼 수 있듯이 주기가 7인 수열 
⋯
이다.
1.3 기약다항식과 LFSR 사이의 호환관계
특정한 기약다항식에 대응하는 특정한 LFSR을 만들 수 있다.



에 대응하는 LFSR을 만든다고 해보자. 우선 세 개의 상자를 그리고 각 상자 위에 
순서대로 



이라고 적는다. 이 상자 위의 항들은 오른쪽으로 한 칸씩 자리를 옳기고, 왼쪽 
상자에는 


이 새로 들어온다. 이때 오른쪽으로 한 칸씩 자리를 옳기는 행위를 한 턴이 지났다
고 말하자. 이제 우리는 



을 만드는 것이 목표이다. 한 턴이 지났을 때, 

와 

이 더해
져서 


 이 되도록 
⊕
하면, 그림 [3]의 LFSR과 같이 된다.



→→→
↑↓↓
←⊕←





그림 [3] 
----------------Page (4) Break----------------
유한체 위에서의 수열 생성과 영상 암호화
- 112 -
항등식은 각 턴이 지날 때마다 가장 왼쪽에 있는 상자 내의 다항식을 나타낸다. 매 턴마다 
오른쪽의 두 상자 안의 항들이 더해져서 가장 왼쪽 상자 항을 나타낸다. 처음 



을 바
탕으로 



이라는 결론으로부터 이 LFSR은 주기가 

인 수열을 만든다는 사실을 알 수 있
다. 마찬가지의 방식으로, 

차 원시다항식 



에 대응하는 LFSR은 예제 3에 의하여 







이기 때문에 생성된 수열의 최대주기는 



이다.
초깃값은 

을 넣을 수 있다. 각 상자들 안에 어떤 배열의 
초깃값들을 넣어도 

이 초깃값인 경우를 제외하고는 시작점만 다르고 숫자의 배열과 주기
가 똑같다. LFSR 상자가 

개 있을 때 넣을 수 있는 수열의 종류는 


이다.
1.4 LFSR의 행렬화
LFSR은 선형대수적인 기계장치이므로 LFSR을 행렬과 대응시킬 수 있다.
→→→
↑↓↓
←⊕←

⊕
그림 [4]



























⊕
그림 [5]
그림 [4]의 LFSR은 

턴에 각 상자 안에 있는 수 

를 
⊕
로 바꾼다. 그림 [5]의 행렬이 
그림 [4]의 LFSR을 행렬로 표현한 것이다. 
×
행렬을 곱하면 그림 [4]의 LFSR과 같다. 단위행렬
은 아무런 영향을 안 주기 때문에 이를 이용하여 LFSR을 만들면 같은 수열들만 나오게 된다.
정의 7.
주어진 

차 다항식 










⋯

에 대하여 그림 [6]의 
×
 정방
행렬을 

의 동반행렬이라고 한다.






⋯

⋯

⋯

⋮⋮⋮⋮
⋯

그림 [6] 의 동반행렬
----------------Page (5) Break----------------
장유준⋅Binbing Xie⋅Zhang Hui
- 113 -
어떤 행렬 

에 대하여 

를 구하면 이것을 특성다항식 (characteristic polynomial)이
라고 한다. 즉, 

의 동반행렬이 행렬 

일 때 행렬 

의 특성다항식이 

이다. 케일리-헤
밀턴 정리에 따라서 행렬 

는 특성다항식의 해가 되고 이 특성다항식이 

차 원시다항식이면 
주기가 


이 되기 때문에 




가 된다.
2. Celluar Automata
2.1 CA의 정의

차원 CA는 각 셀(cell)이 자기 자신과 양 옆 셀의 영향을 받아 값이 바뀐다.
자기 자신과 양 옆, 총 

가지의 초기조건에 따라서 나오는 결과가 각각 다르므로 총 



가지 경우가 있고, 이들에 번호를 매길 수 있다. 전 셀의 양 옆 수를 합한 것이 다음 셀
의 수가 되는 규칙은 

이다. 그리고 전셀의 양 옆와 자기 자신을 합한 것이 다음 셀의 수
가 되는 규칙은 

이다.

이전 셀과 양옆 이웃
00000
11001
10010
01011
11100
00101
01110
10111
표 1
↓
↓
↓
그림 [7]
↓
↓
↓
그림 [8]
그림 [7]의 수열들은 

을 적용하여, 그리고 그림 [8]의 수열들은 

을 적용하여 
만든 시간에 따른 수열의 흐름이다. 선 밖의 

들은 null boundary를 나타내며 수열의 왼쪽 끝 
셀의 왼쪽 이웃, 그리고 오른쪽 끝 셀의 오른쪽 이웃을 

으로 설정한다는 의미를 가진다.
----------------Page (6) Break----------------
유한체 위에서의 수열 생성과 영상 암호화
- 114 -
2.2 CA의 행렬
본 연구에서는 

차원 CA를 다루겠다. 앞서 언급했듯이 

차원 CA는 각 셀(cell)마다 

가
지 규칙들을 적용할 수 있다. 이 규칙은 모든 셀에 한가지로 통일하여 적용할 필요 없이 각 셀
마다 다른 규칙을 적용할 수 있다. 예를 들어서 셀이 

개가 있는 CA는 각 칸마다 순서대로 

을 적용할 수 있고 

이라 표기한다.
90150150
abc
 ↓ 
b
⊕
0a
⊕
b
⊕
cb
⊕
c
그림 [9] Null boundary
그림 [7]의 CA를 나타내는 행렬은 









이다.

























⊕
⊕⊕
⊕
그림 [10]
CA 규칙을 행렬로 바꾸려면 대각선의 각 원소에 그 규칙에 대응하는 

 혹은 

을 넣어주면 된다.




⋯

→








⋯


⋯
⋮⋯
⋮⋮




그림 [11]2.3 Trace를 이용한 수열의 일반항 표현
1) 수열과 이들을 표현하는 벡터, 그리고 생성함수
LFSR로 만든 수열은 각 항을 순서대로 


⋯
이라 이름을 붙일 수 있다. 


들 간
----------------Page (7) Break----------------
장유준⋅Binbing Xie⋅Zhang Hui
- 115 -
의 관계는 그 수열을 만드는 특성다항식에 의하여 결정된다.



으로 수열을 만들면 






이다. 이때 


을 결정
하는 초기 값 






에 따라 다른 


들의 값들이 정해진다. 초기 값들은 

가 있고 이들이 생성하는 수열의 마디들의 집합을 벡터의 
모임이라 부르고 

라 표기한다.









⋯



는 수열 생성함수이다. 어떤 수열 
⋯
을 수열 생성함수로 표현하면 식 (6) 
이다.








⋯












⋯
(6)
여기서 주목해야 할 점은 
∙

 (

은 유한한 어떤 정수)이다.
∙







      (7)








         (8)
식 (9)의 분자는 초깃값에 따라 지수가 달라지기 때문에 일반성을 잃지 않고 

로 둘 수 있다.
2) Trace
기약다항식 



을 인수분해 하자. 우선 한 근을 

라고 하면 

를 인수로 갖
는다. 또한, 

















이므로 


도 근이다. 이런 과정을 
반복하면 


도 분해된다. 따라서 







이것을 통하여 우리는 어떠한 

차 기약다항식의 한 근을 기본 원소가 

라 하면




⋯






로 인수분해가 된다는 것을 알 수 있다.
----------------Page (8) Break----------------
유한체 위에서의 수열 생성과 영상 암호화
- 116 -
정의 8. (Trace 함수)

차 기약다항식의 한 근 

라 할 때, 기약다항식은 




⋯






으
로 인수분해가 된다. 그리고 Trace 함수를 



라고 하면, 








⋯


이고 




→
이다.
예제 9.



의 한 근 

에 대하여 
⋯
의 함숫값은 식 (9)과 같다.











(9)
여기서의 중요한 사실은 


는 

를 이용하여 식 13과 같이 표현할 수 있다.







 (

는 초깃값 역할을 해준다)           (10)
경우에 따라서 

에 

를 더해줘서 수열과의 순서를 맞춰줘야 하지만, 

이 생성하는 수열의 
반복되는 마디가 LFSR을 통해 만들어진 수열의 반복되는 마디와 같다는 사실은 변하지 않는
다. 더불어서 

은 선형적인 함수이며 




⋯
이다.
3) 


는원시다항식∈
으로 생성된 수열의 일반항






으로 만든 수열을 구해보자
우선 이 다항식으로 생성되는 수열을 식 (5)를 이용하여 식 (14)와 같이 표현할 수 있다.











(11)







이라고 할 때 상반다항식 

는 식 (12)로 표현할 
수 있다.













    (12)
식 (12)를 이용하여 

를 쪼갤 수 있다.
----------------Page (9) Break----------------
장유준⋅Binbing Xie⋅Zhang Hui
- 117 -
















































































(

의 차수가 

이고 


의 

를 구하면 













이 된다) 
우리는 


의 관계를 구해내야 한다.

는 

의 연산을 따르기 때문에 




이다.

















































(13)
식 (13)을 풀어서 분모가 







인 각 항들의 분모를 비교해보면 







가 되고, 


는 


로 간략하게 표현할 수 있다.































≥





















≥














≥

















  (14)
식 (14)의 


의 계수가 수열의 일반항, 











을 나타낸다. 









를 이용하면





















≥









≥














≥






이다. 따라서
----------------Page (10) Break----------------
유한체 위에서의 수열 생성과 영상 암호화
- 118 -































식 (10)에 의하면 원시다항식의 수열을 만드는 경우 그 일반항이 







이다.

도 식 (10)과 상당히 유사한 형태를 보인다. 단지 기약다항식의 중복도만큼 

의 
개수가 있고 각 

은 앞에 



가 곱해져 있는 것이다.



은 

값에 따라 

에 대한 수열들은 같다.
예제 10.
⋯
 주기: 

⋯
 주기: 

⋯
 주기: 

⋯
 주기: 

⋯
 주기: 

⋯
 주기: 

⋯
 주기: 

⋯
 주기: 


에 따라서 생성된 수열을 

와 같은 방식으로 표현한 다항식을 

라 하자. 


≥




을 계산해보면 




이 되고 더 많은 증명들을 거치면 

는 


≤

일 때 주
기가 


가 된다.
즉, 일반적으로 다항식 

에 의해 생성된 











의 주기는 


≤
인 부분이 원
시다항식의 주기 

와 맞물려서 
×

가 된다. 만일 


≤
인 부분의 



이면 









≤
이 되어서 주기가 
×

가 되지 못한다.
3. 수축 수열 (Shrinking generator)
3.1 


기약다항식⋯
의 수열
특성다항식 




의 수열을 만들어보면 

이 반복되어
----------------Page (11) Break----------------
장유준⋅Binbing Xie⋅Zhang Hui
- 119 -
서 나온다. 이 수열을 

개씩 끊어서 세로로 쓴 것이 표 1이다.






1






표 2.




으로 생성된 수열 
표 1처럼 


으로 생성된 수열을 







개의 블록으로 쪼갠 후 세로로 정
열하면 주기가 

인 수열이 


개가 나온다. 이때 표 1처럼 재배치 된 수열의 

번째 줄의 가로를 
수열로 고려하면 그 수열을 


로 부르기로 한다.


⋯





































































  (15)
(예제 10에서 나왔듯이 



는 주기가 


인 수열이기 때문에 








가 된다.)





는 
gcd


이기 때문에 주기가 

가 된다.
식 15는 식 (10)와 유사하다. 단지 단 한 가지 차이점이 있는데, 근 

가 



로 대체되었다.
3.2 수축 수열의 정의
두 개의 원시다항식으로 만든 수열을 주기가 짧은 수열을 위에, 주기가 긴 수열을 아래에 
놓는다. 그런 다음 주기가 짧은 수열의 항이 1일 때의 바로 밑의 긴 주기의 항을 취해서 새로
운 수열을 만들면, 그 수열이 수축 수열(Shrinking sequence)이다.
⋯


⋯


⋯






(16)
----------------Page (12) Break----------------
유한체 위에서의 수열 생성과 영상 암호화
- 120 -
이때 아래의 수열을 

라 하고 그 차수를 

, 주기가 



이라고 하고 마찬가지로 위의 수열
을 

, 그 차수를 

, 주기가 



이라고 하면 최종적으로 생성된 수축 수열은 주기가 최대 





이기 때문에 특성다항식이 




∈
의 형태임을 알 수 있다.
3.3 선형복잡도 (Linear Complexity)
선형적으로 생성된 수열의 선형복잡도가 

이라고 하자. 그러면 그 수열로부터 

만큼의 비
트를 얻으면 Berlekamp-Massey algorithm을 사용하여 그 수열을 생성한 특성다항식과 전체 
수열을 구할 수 있다. 원시다항식의 경우 

차 다항식으로 수열을 만들면 선형복잡도는 

이
다. 즉, 비록 수열의 주기 자체는 1.3의 마지막 단락에서 설명했듯이 


이지만, 해커가 

개의 
비트만 훔치면 전체수열을 알아낼 수 있는 것이다.
주석의 논문 [1]의 

장(Period and Linear Complexity)는 수축수열의 선형복잡도를 다루면
서 두 가지 정의를 이야기한다.
정의 11.
수열 

와 

가 식 21의 방식대로 

를 위에, 

를 밑에 배치하고 수축수열 

를 생성한다고 
하자. 




를 각각 

와 

의 주기라고 하자. 만일
-

와 

가 최대주기를 가지고 (

 원시다항식으로 생성한 수열이라면)
- (




)
이라면, 

의 주기는 


∙



∙

이다.
정의 11.
정의 10의 조건 아래에서, 수축수열 

의 선형복잡도를 

라 하자. 그러면, 
∙

≤∙

이다. (

는 수열 

가 

차 다항식에 의해 생성되면, 그 

을 의미
한다)
위의 두 정의에 대한 증명은 논문 [1]의 

장에 적혀있다. 즉, 수축수열은 원시다항식으로 
생성한 수열보다 차수에 비하여 주기가 짧지만, 선형복잡도는 상당히 높다. 
----------------Page (13) Break----------------
장유준⋅Binbing Xie⋅Zhang Hui
- 121 -
III. 연구 방법 및 절차
1. 이미지 암호화 (Image Encryption)
이미지 암호화의 알고리즘은 다음과 같다.
단계 1: 이미지를 행렬로 변환시킨다.
단계 2: 특정한 특성다항식 혹은 CA를 이용하여 수열을 만든다.
단계 3: 행렬의 원소들에 차례대로 키를 XOR 연산을 시켜준다.
단계 4: 행렬을 다시 이미지로 변환시킨다.
단계 1은 만일 이미지가 
×
이고 흑백이라면, 각 
×
개의 픽셀(pixel)은 값이 
부터 

까지의 수들로 표기된다. 

은 가장 어두운 검은색, 

는 가장 밝은 흰색이 된다. 이
러한 원리를 이용하여 흑백사진의 이미지를 행렬로 표현할 수가 있다. 또한, 우리가 사용하는 
암호화 방식에 적합하도록 행렬의 각 원소들은 이진법으로 수를 표기한다.
단계 2에서 생성한 수열이 키가 되어준다.
단계 3은 행렬의 원소들에 순서대로 왼쪽에서 오른쪽으로, 위에서 아래로 차례대로 키수
열을 XOR 연산을 시켜준다. XOR 연산을 보통 가로로 더하지만, 암호체계를 쓰는 양쪽이 정
한 규칙대로 차례대로 더해주면 되기에 세로로 더하거나 대각선으로 더해도 상관없다.
다시 복호화를 할 경우에는 암호화된 이미지를 행렬로 변환시킨 후, 키수열을 더해주고 이
미지로 변환시킨다. 그 외에도 암호를 해킹하기 어렵게 만들기 위하여 다른 여러 연산들을 넣
을 수 있지만, 기본적인 이 

가지 단계는 반드시 들어간다.
2. 파이썬(Python)을 이용한 이미지 암호화의 코딩
파이썬을 이용하여 키수열로 이미지 암호화를 하면 다음과 같은 단계들이 필요하다.
단계 1: 이미지를 변수로 불러오기
단계 2-1: 원소를 이진수로 바꾸기
단계 2-2: CA로 수열 생성
단계 3: 이진수로 표현된 수열 
⊕
 CA 수열
----------------Page (14) Break----------------
유한체 위에서의 수열 생성과 영상 암호화
- 122 -
단계 4: 이미지의 모든 원소들이 3)을 실행할 때까지 2)로 되돌아감
단계 5: 암호화된 변수를 이미지로 저장
위의 단계들을 코딩으로 표현하면 다음과 같다.
import numpy as np
import cv2
import operator as op
import random as rd
from matplotlib import pyplot as plt
그림 [12] 
def ca(cav,Rul):
      k=len(cav)
      tmp=cav
      cav[0]=(tmp[0]*Rul[0]+tmp[1])%2
      cav[k-1]=(tmp[k-1]*Rul[k-1]+tmp[k-2])%2
      for i in range(1,k-1):
      cav[i]=(tmp[i-1]+tmp[i]*Rul[i]+tmp[i+1])%2
      return cav
그림 [13]
def crypt(img,cav,Rul):
      for i in range(img.shape[1]):
      for j in range(img.shape[0]):
      nVec=0
      for t in range(8):
      cav=ca(cav,Rul)
      nVec=nVec + (cav[0]*(2**(7-t)))
      img[i,j]=op.xor(img[i,j],nVec)
 
      return img
그림 [14] 
----------------Page (15) Break----------------
장유준⋅Binbing Xie⋅Zhang Hui
- 123 -
if __name__ == ‘__main__’:
      file = ‘Lenna2.jpg’
      img = cv2.imread(file, 0)
      cav=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
      Rul=[1,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1]
      img=crypt(img,cav,Rul)
그림 [15] 
      cv2.imshow(’image’, img)
그림 [16] 
       cv2.waitKey(0)
       cv2.destroyAllWindows()
그림 [17] 
그림 12와 17는 프로그램의 환경조성을 위한 부분이다.
그림 13은 Rul(규칙)과 cav(초기값)을 입력하면 수열을 생성해준다. 현재 이 코
드에서는 초기값[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]과 규칙
[1,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1]을 입력했다.
그림 14는 이미지를 행렬로 변환시킨 후, 원소에 수열을 더해준다. 이 함수가 이미지를 암
호화하는 함수이다.
그림 15는 실제로 이미지 암호화 함수를 주어진 이미지, 규칙, 그리고 초기값을 대입하여 
실행했다.
그림 16은 암호화된 이미지를 불러온다.
위의 파이썬 코딩을 통하여 모든 선형적인 CA들로 이미지를 암호화를 할 수 있다.
3. 히스토그램, 산포도, 그리고 상관계수
암호화된 이미지가 통계학적으로 얼마나 무작위하게 암호화가 되었는지를 알아보기 위하
여 히스토그램, 그리고 상관계수와 산포도 그래프를 확인하는 코딩을 만들었다.
----------------Page (16) Break----------------
유한체 위에서의 수열 생성과 영상 암호화
- 124 -
3.1 히스토그램
히스토그램은 이미지의 픽셀에 표기된 수의 개수를 그래프로 표현한다. 가로축은 

∼
까지의 픽셀의 색깔을 수로 나타내고 세로축은 픽셀의 개수를 의미한다. 이미지를 암호화하기 전과 후를 비교해보았을 때 암호화한 후에는 특정 색깔에 대한 픽셀의 개수가 무작위하게 
되어 암호화가 잘 되었다는 것을 알 수 있다. 그림 20은 원문 사진의 히스토그램이고, 그림 21
는 암호화된 사진의 히스토그램이다.
그림 [18] Lenna.jpg (
×
) 그림 [19] Lenna_encyrpted.jpg (
×
) 
그림 [20]그림 [21]3.2 산포도 그래프
산포도 그래프는 어떤 두 변수사이의 관계를 살펴보기 위하여 사용한다. 만일 산포도 그래
프 위의 데이터들이 규칙성을 보이면 그 데이터들은 

와 

사이의 관계가 더 명확히 들어난다. 
----------------Page (17) Break----------------
장유준⋅Binbing Xie⋅Zhang Hui
- 125 -
그러나 그래프 위의 데이터들이 무작위로 있으면 

와 

사이의 관계는 거의 없다. 이러한 성질
을 이용하여 이미지를 암호화 했을 때, 암호화 된 이미지에서 랜덤으로 추출한 두 인접한 픽셀 
사이의 값에 차이가 얼마나 나는지를 확인할 수 있다. 산포도 그래프는 가로축을 하나의 픽셀, 
그래프의 세로축을 인접한 또 다른 픽셀의 수로 설정한다. 만일 

와 

 사이의 선형적인 관계
를 나타내면, 이것은 곧 이미지의 여러 부분들의 색깔이 뭉쳐있다는 것을 의미하고, 암호화가 
잘 안 된 것이다. 반면에 암호화가 잘 된 이미지는 모양이 TV의 노이즈와 같은 모습이 되고, 
와 

 사이의 관계도 상당히 무작위하게 된다. 그림 20은 원문의 

축으로 이웃한 두 픽셀을 각
각 가로축, 세로축으로 지정하여 그래프를 만들었고, 그림 22은 원문의 

축으로 이웃한 두 픽
셀을 각각 가로축, 세로축으로 지정하여 만든 그래프이고, 그림 23은 암호문의 

축으로 이웃
한 두 픽셀을 각각 가로축, 세로축으로 지정하여 만든 그래프이다.
그림 22 그림 233.3 상관계수
상관계수는 두 변수간의 선형관계를 수치화하여 나타낸 것이다. x와 y 사이의 상관관계가 

 혹은 

에 가까워진다면, 두 변수를 놓고 만든 그래프는 위의 점들은 더욱 직선에 가까워진
다. 반면에 

와 

사이의 상관관계가 

에 가까워진다면, 두 변수를 놓고 만든 그래프 위의 점
들은 상당히 무작위하다.
이러한 사실이 왜 중요하면 이미지를 암호화 했을 때 두 인접한 픽셀이 서로 값의 차이가 
많이 나야지 암호화가 잘 되었다는 지표가 되어준다. 만일 두 인접한 픽셀의 값이 비슷하다면 
이미지의 어느 한 부분이 암호화가 잘 안 되어서 윤곽이 들어날 수가 있다.
----------------Page (18) Break----------------
유한체 위에서의 수열 생성과 영상 암호화
- 126 -
IV. 연구 결과
그림 24는 원문이다. 픽셀은 
×
이다.
그림 25는 원시다항식 









를, 그리고 CA 규칙
그림 24 Lenna.jpg (
×
) 그림 25 Histogram & scatter plot of pic.24
[10011000010000000101101101011010101010101100011001]을 이용하여 키수열을 만든 
후 원문에 XOR 연산을 하여 만든 암호문 이미지이다. 히스토그램과 산포도 그래프들 모두 이
미지의 암호화가 잘 되었음을 나타내고 상관계수 역시 0에 상당히 근접하여 이미지의 픽셀들
이 상당히 무작위하다는 것을 알 수 있다. 키수열의 주기는 


×

으로 상당
히 길다. 그러나 선형복잡도는 

이다.
그림 27은 30차 다항식과 19차 다항식으로 각각 만든 수열을 조합하여 만든 수축수열을 
키수열로 설정하고 XOR하여 만든 암호화 이미지다.
키수열의 주기는 




×

으로 매우 길다. 그리고 선형복잡도 
는 
∙

≤∙

≤
으로 원시다항식과는 비교할 수 없을 
정도로 높다. 
그림 26와 그림 28 모두 히스토그램과 산포도 그래프를 보면 암호화가 잘 되었다. 그러나 
그림 26의 선형복잡도는 그림 25보다 월등히 높았다. 이러한 사실을 통하여 만일 이미지를 암
호화한다고 하면 원시다항식을 사용하는 것 보다 수축생성함수를 사용하는 것이 더욱 보안성
이 뛰어나다는 것을 알 수 있다.
----------------Page (19) Break----------------
장유준⋅Binbing Xie⋅Zhang Hui
- 127 -
그림 26 Lenna_encrypted_primitive.jpg그림 27 Histogram & scatter plot of pic.25
그림 28 Lenna_encrypted_shrinking.jpg그림 29 Histogram & scatter plots of pic.27
V. 고찰
본 연구의 목적은 수축 수열을 이미지 암호화에 적용시켜 그 실효성을 확인해보는 것이다. 
15차 이상의 원시다항식으로 이미지를 암호화하자 히스토그램도 상관계수도 무작위에 가깝
게 잘 나왔다. 마찬가지로, 4차와 7차 다항식으로 수축 수열을 만들어 이미지에 암호키로 사용
을 해보니 히스토그램과 상관계수가 무작위에 가깝게 잘 나왔다. 그러나 비록 두 암호의 주기
----------------Page (20) Break----------------
유한체 위에서의 수열 생성과 영상 암호화
- 128 -
는 원시다항식을 쓰는 암호키가 더 길지만, 선형복잡도는 수축 수열이 더 크다. 둘다 암호화가 
잘 되는 상황에서 더욱 안전한 암호키를 고르라고 하면 선형복잡도가 더 높은 암호키를 쓰는 
것이 옳다.
VI. 결론
이미지 암호화를 기약다항식이나 원시다항식에 의해 생성된 선형수열 대신 CA를 사용한 
수축수열을 암호키로 정하고 암호화하면 보안성이 더 강하다. 또한, 수축 수열은 두 가지 수열
의 조합을 사용하여 만들었기 때문에 더 많은 양의 암호키를 생성할 수 있다. 이로서 수축수열
을 키로 사용하는 암호화 방식은 텍스트뿐만이 아니라 이미지 암호화에도 적합하다는 것을 알 
수 있다. 또한, 이미지에 암호키를 가로로만 더하는 것이 아니라 세로 혹은 대각선, 그 외 다양
한 방법도 모색하면 좋을 것이다.
VII. 참고문헌
[1] D. Coppersmith, H. Krawczyk, Y. Mansour, The Shrinking Generator, Annual 
International Cryptology Conference. Springer Berlin Heidelberg, pp. 22-39, 1993.
[2] Ping Ping, Feng Xu, Zhi-Jian Wang,, Image encryption based on non-affine and 
balanced cellular automata, College of Computer and Information, Hohai University, 
Nanjing 210098, China, 2014.
[3] M.E. Pazo-Robles, A. Fúster-Sabater, Using Linear Difference Equations to Model 
Nonlinear Cryptographic Sequecnes, International Journel of Nonlinear Sciences & 
Numerical Simulation 11(3):165-172, 2010.
[4] Robert J. McEliece, Linear Recurring Sequences over Finite Field, For the Degree of 
Doctor of Philosophy, California Institue of Technology, Pasadona, California, 1967.
[5] 최언숙, 조성진, 김태홍, Image Encryption Based on One Dimensional Nonlinear Group 
Cellular Automata, Journal of Korea Multimedia Society Vol.18, No.12, December 2015. 
[6] 조성진, 유한체 및 그 응용, 교우사, 2007. 
----------------Page (21) Break----------------
장유준⋅Binbing Xie⋅Zhang Hui
- 129 -
ABSTRACTProducing Series Solution of 
Differential Equation to use Polynomial Recurrence
Reseacher : Yujune Jang(sophomore, happycattony0329@gmail.com)
Hui Zhang(sophomore, Huzhang9876@163.com)
Binbing Xie(sophomore, xiebinbing897@163.com)
Supervisor : Sungjin Cho(Pukyoung National University, sjcho@pknu.ac.kr)
Co-Supervisor : Minjung Kwon(Pukyoung National University, 
mjblack02@pknu.ac.kr)
Abstract
We live in a period where our society is in need of secure encryption. In such era 
where information takes critical place in our society, the security for our precious 
information is what we need the most. Currently, password generated by CA is 
accomplished by making a sequence long enough based on linear algebra so that it takes 
years to hack the complete key. However, this method is easily deactivated when the 
hacker obtains a part of the key with bits twices as much as the period of the sequence. 
Our team is making a cryptograph system made with non-linear sequence.
----------------Page (22) Break----------------
